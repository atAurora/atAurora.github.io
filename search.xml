<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>html语义化理解及SEO</title>
    <url>/2021/11/22/html-semantic-seo/</url>
    <content><![CDATA[<h2 id="1-语义化"><a href="#1-语义化" class="headerlink" title="1. 语义化"></a>1. 语义化</h2><h3 id="1-1-含义"><a href="#1-1-含义" class="headerlink" title="1.1 含义"></a>1.1 含义</h3><p><strong>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）</strong>。通俗的来讲就是正确的标签做正确的事情。</p>
<h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><ul>
<li>  对机器友好，带有语义的文字表现力丰富，更适合搜索引擎的爬虫爬取有效信息，有利于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录；</li>
<li>  对开发者友好，使用语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护。</li>
</ul>
<h3 id="1-3-常见的语义化标签"><a href="#1-3-常见的语义化标签" class="headerlink" title="1.3 常见的语义化标签"></a>1.3 常见的语义化标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span>  头部</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span>  导航栏</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span>  区块（有语义化的div）</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span>  主要区域</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span>  主要内容</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span>  侧边栏</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  底部</span><br></pre></td></tr></table></figure>

<h3 id="1-4-写语义化代码应该注意什么"><a href="#1-4-写语义化代码应该注意什么" class="headerlink" title="1.4 写语义化代码应该注意什么"></a>1.4 写语义化代码应该注意什么</h3><ul>
<li>  尽可能少的使用无语义的标签div和span；在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利；</li>
<li>  不要使用纯样式标签，如：b、font、u等，改用css设置。需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）；</li>
<li>  使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td；</li>
<li>  表单域要用fieldset标签包起来，并用legend标签说明表单的用途；每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来</li>
</ul>
<h2 id="2-SEO"><a href="#2-SEO" class="headerlink" title="2. SEO"></a>2. SEO</h2><h3 id="2-1-TKD-设置"><a href="#2-1-TKD-设置" class="headerlink" title="2.1 TKD 设置"></a>2.1 TKD 设置</h3><ul>
<li><p>  页面 TKD 要包含品牌词及业务词，提升页面排名</p>
</li>
<li><p>例如：掘金的 TKD</p>
<ul>
<li>  Title：掘金 - 代码不止，掘金不停</li>
<li>  Keywords：掘金,稀土,Vue.js,前端面试题,nginx配置,Kotlin,RxJava,React Native,敏捷开发,Python</li>
<li>  Description：掘金是一个帮助开发者成长的社区,是给开发者用的 <code>Hacker News</code>,给设计师用的 <code>Designer News</code>,和给产品经理用的 <code>Medium</code>。掘金的技术文章由稀土上聚集的技术大牛和极客共同编辑为你筛选出最优质的干货,其中包括：<code>Android、iOS</code>、前端、后端等方面的内容。用户每天都可以在这里找到技术世界的头条内容。与此同时,掘金内还有沸点、掘金翻译计划、线下活动、专栏文章等内容。即使你是 <code>GitHub、StackOverflow、</code>开源中国的用户,我们相信你也可以在这里有所收获。</li>
</ul>
</li>
</ul>
<h3 id="2-2-页面内容优化"><a href="#2-2-页面内容优化" class="headerlink" title="2.2 页面内容优化"></a>2.2 页面内容优化</h3><ol>
<li> 网页代码语义化调整：多使用语义化标签，便于爬虫搜索。</li>
<li> 页面内容关键词强化：在页面大小标题和文案中重复关键词，以达到内容强化目的；关键词汇避免使用图片，便于爬虫检索，收录。</li>
<li> img 添加 alt 属性，用 h1 标签写内容关键字。</li>
</ol>
<p>引导链接</p>
<ul>
<li>  网站底部推荐部分保留产品介绍、常见问题汇总等降低跳出率的引导，提高页面留存与转化；或者与所推荐页面形成互链形式，以稳定页面流量权重。</li>
</ul>
<h3 id="2-3-移动端优化"><a href="#2-3-移动端优化" class="headerlink" title="2.3 移动端优化"></a>2.3 移动端优化</h3><ul>
<li>  设置移动页面，或者将 pc 页面设置为自适应，增加移动端搜索的体验和留存转化</li>
<li>移动页面设计需注意以下原则：<ol>
<li> 页面字体、字符大小、文本行间距等设计，应适合手机用户阅读，不可明显过大过小，正文文本字号不小于 10pt（pt：绝对单位，等于1/72英寸）。</li>
<li> 首屏主体内容必须占屏幕的 50% 以上。</li>
<li> 主体内容应与其它板块有明显区分，且位于屏幕的中心位置，使用户获取信息是不受任何干扰。</li>
<li> 导航的功能与位置明确，避免用户使用过程中被误导</li>
<li> 除以上提到的内容外，网站还应避免其他影响页面内容辨识的情况，例如页面出现大面积空白、文本无任何排版、段落/图片排版错乱不整齐、主体内容展示不全等。</li>
</ol>
</li>
</ul>
<h3 id="2-4-站外优化"><a href="#2-4-站外优化" class="headerlink" title="2.4 站外优化"></a>2.4 站外优化</h3><ol>
<li> 在搜索引擎排名较高的公众平台发布正面网站信息，以建设良好口碑；负面信息排名较高的需删除或者屏蔽处理。</li>
<li> 百度，互动，搜狗等百科的创建更新与维护，(互动百科在今日头条有着较高的排名，现在今日头条也在发展搜素引擎)，百科对树立品牌形象较为重要。</li>
<li> 公关舆情传播，宣传新闻源发布。</li>
<li> 站外推广与外链建设。</li>
<li> 根据竞争对手及品牌业务分析，拓展高质量、高权重的外链渠道、科技论坛、自媒体平台、分类信息网等，发布高质量锚文本外链，另进行友情链接交换，以提高关键词排名及自然流量。</li>
</ol>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>script标签defer和async的区别，还有哪些属性？</title>
    <url>/2021/11/21/script-attribute/</url>
    <content><![CDATA[<h2 id="1-defer-和-async-属性出现的意义"><a href="#1-defer-和-async-属性出现的意义" class="headerlink" title="1. defer 和 async 属性出现的意义"></a>1. defer 和 async 属性出现的意义</h2><p>如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。</p>
<h3 id="1-1-defer-属性"><a href="#1-1-defer-属性" class="headerlink" title="1.1 defer 属性"></a>1.1 defer 属性</h3><p>推迟执行脚本。表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。</p>
<ul>
<li>  在 &lt;script&gt; 标签上设置 defer 属性，相当于告诉浏览器立即下载，但延迟执行。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。</li>
<li>  HTML5 规范要求脚本应该按照它们出现的顺序执行，因此第一个推迟的脚本会在第二个推迟的脚本之前执行，并且会在 DOMContentLoaded 事件之前执行。不过在实际当中，不一定总会按照顺序或者在 DOMContentLoaded 事件之前执行。</li>
</ul>
<h3 id="1-2-async-属性（HTML5）"><a href="#1-2-async-属性（HTML5）" class="headerlink" title="1.2 async 属性（HTML5）"></a>1.2 async 属性（<strong>HTML5</strong>）</h3><p>异步执行脚本。表示应该立即请求脚本，并尽快解析和执行，但不能阻止其它页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文件有效。</p>
<ul>
<li>  告诉浏览器立即下载，但不必等脚本下载和执行完后再加载页面，同样也不必等到该异步脚本下载和执行完后在加载其它脚本。（因此，异步脚本不应该在加载期间修改 DOM）</li>
<li>  标记为 async 的脚本并不保证能按照它们出现的次序执行。异步脚本保证会在页面的的 <strong>load</strong> 事件前执行，但可能会在 <strong>DOMContentLoaded</strong> 之前或之后。</li>
</ul>
<h2 id="2-lt-script-gt-标签其它属性"><a href="#2-lt-script-gt-标签其它属性" class="headerlink" title="2. &lt;script&gt; 标签其它属性"></a>2. &lt;script&gt; 标签其它属性</h2><h3 id="2-1-charset-属性"><a href="#2-1-charset-属性" class="headerlink" title="2.1 charset 属性"></a>2.1 charset 属性</h3><p>使用 src 属性指定的代码字符集。很少使用，因为大多数浏览器不在乎它的值。</p>
<h3 id="2-2-crossorigin-属性"><a href="#2-2-crossorigin-属性" class="headerlink" title="2.2 crossorigin 属性"></a>2.2 crossorigin 属性</h3><p>那些没有通过标准CORS (跨域资源共享)检查的正常script 元素传递最少的信息到 window.onerror。可以使用本属性来使那些将静态资源放在另外一个域名的站点打印错误信息。默认不使用 CORS，“” 相当于 “anonymous” ，对此元素的 CORS 请求不设置凭据标志；“use-credentials”，对此元素的 CORS 请求将设置凭证标志，这意味着请求将提供凭据。</p>
<h3 id="2-3-integrity-属性"><a href="#2-3-integrity-属性" class="headerlink" title="2.3 integrity 属性"></a>2.3 integrity 属性</h3><p>允许对比接收到的资源和指定的加密签名以验证子资源完整性（SRI）。如果接收到的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚本不会执行。这个属性可以用于确保内容分发网络（CDN）不会提供恶意内容。</p>
<h3 id="2-4-nomodule-属性"><a href="#2-4-nomodule-属性" class="headerlink" title="2.4 nomodule 属性"></a>2.4 nomodule 属性</h3><p>这个布尔属性被设置来标明这个脚本在支持 ES2015 modules 的浏览器中不执行。实际上，这可用于在不支持模块化 JavaScript 的旧浏览器中提供回退脚本。</p>
<h3 id="2-5-language-属性"><a href="#2-5-language-属性" class="headerlink" title="2.5 language 属性"></a>2.5 language 属性</h3><p>废弃。最初用于表示代码块中的脚本语言。大多数浏览器都会忽略这个属性，不应该再使用它。</p>
<h3 id="2-6-src-属性"><a href="#2-6-src-属性" class="headerlink" title="2.6 src 属性"></a>2.6 src 属性</h3><p>定义引用外部脚本的URI，这可以用来代替直接在文档中嵌入脚本。指定了 src 属性的script元素标签内不应该再有嵌入的脚本。</p>
<h3 id="2-7-type-属性"><a href="#2-7-type-属性" class="headerlink" title="2.7 type 属性"></a>2.7 type 属性</h3><p>代替 language，表示代码块中脚本语言的内容类型（也称 MIME 类型：<strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types</a></strong>）。支持的MIME类型包括text/javascript, text/ecmascript, application/javascript（非IE支持）, 和application/ecmascript（非IE支持）。如果没有定义这个属性，脚本会被视作JavaScript。如果MIME类型不是JavaScript类型（上述支持的类型），则该元素所包含的内容会被当作数据块而不会被浏览器执行。JS 文件中的MIME 类型通常是 “application/x-javascript” 。如果type属性为module，代码会被当作JavaScript模块 。</p>
<h3 id="2-8-text-属性"><a href="#2-8-text-属性" class="headerlink" title="2.8 text 属性"></a>2.8 text 属性</h3><p>和 textContent 属性类似，本属性用于设置元素的文本内容。但和 textContent 不一样的是，本属性在节点插入到DOM之后，此属性被解析为可执行代码。</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
</search>
